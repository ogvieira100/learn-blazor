@inject IHttpClientFactory factory
@rendermode InteractiveAuto
<table class="table caption-top">
    <caption>Lista de clientes</caption>
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Nome</th>
            <th scope="col">SobreNome</th>
            <th scope="col">Email</th>
            <th scope="col">Telefone</th>
            <th scope="col">CPF</th>
            <th scope="col">Ações</th>
        </tr>
    </thead>
    <tbody>
        @if (Customers != null)
        {
            @foreach (var item in Customers)
            {

                <tr>
                    <td>
                        #
                    </td>
                    <td>
                        @item.Name
                    </td>
                    <td>
                        @item.SurName
                    </td>
                    <td>
                        @item.Email
                    </td>
                    <td>
                        @item.Telphone
                    </td>
                    <td>
                        @item.CPF
                    </td>
                    <td>
                        #
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {

    [Parameter] public Customers? CustomersFilter { get; set; }
    HttpClient? Api;
    List<Customers>? Customers;
    PagedDataResponse<Customers>? PagedDataResponseCustomers;
    [Parameter] public EventCallback<PagedDataResponse<Customers>> PagedDataResponseCustomersChanged { get; set; }

    protected override void OnInitialized()
    {
        Customers = new List<Customers>();
        Api = factory.CreateClient("ApiTreino");
    }

    protected override void OnParametersSet()
    {

    }

    protected override async Task OnInitializedAsync()
    {
        await Search(new CustomerSearch());
    }

    public async Task Search(CustomerSearch customerSearch)
    {
        
        var queryString = Newtonsoft.Json.JsonConvert.SerializeObject(customerSearch);
        
        var search = await Api!.GetFromJsonAsync<ResponseApi<PagedDataResponse<Customers>>>($"api/customers?search={queryString}");
        if (!search.Notys.Any())
        {
            PagedDataResponseCustomers = search.Obj;
            if (PagedDataResponseCustomers != null)
            {
                Customers = PagedDataResponseCustomers.Items;
                await PagedDataResponseCustomersChanged.InvokeAsync(search.Obj);
            }
        }
    }

}
