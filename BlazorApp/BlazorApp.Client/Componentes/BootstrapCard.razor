<h3>BootstrapCard</h3>

<div class="card text-center">
    <div class="card-header">
        @Header
    </div>
    <div class="card-body">
        <h5 class="card-title">@Title</h5>
        <p class="card-text">@Description</p>

        <p class="card-text">Nome Cliente</p>
        <p class="card-text">@Customer.Name</p>
        <p class="card-text">SobreNome Cliente</p>
        <p class="card-text">@Customer.SurName</p>

        <button  @onclick=ClickBtn class="btn btn-info">
            @ButtonText
        </button>
        <button @onclick="@(()=>{ClickBtnChangeCustomer.InvokeAsync(Customer) ; StateHasChanged();})" class="btn btn-light">
            @ButtonText
        </button>
        <button @onclick="@(()=> {ClickBtnChangeDescription.InvokeAsync(Description) ;StateHasChanged(); })" class="btn btn-danger">
            @ButtonText
        </button>
        <button @onclick="@(async () =>
                        {
                            if (ClickBtnChangeDescriptionReturn != null)
                            {
                                var result = await ClickBtnChangeDescriptionReturn.Invoke(Description ?? "");
                                Console.WriteLine($"Valor retornado: {result}");
                                StateHasChanged();
                            }
                        })" class="btn btn-primary">
            @ButtonText
        </button>
        <button @onclick="@(async () =>
                        {
                            if (ClickBtnChangeCustomerReturn != null)
                            {
                                var result = await ClickBtnChangeCustomerReturn.Invoke(Customer);
                                Customer = result;  
                                StateHasChanged();
                            }
                        })" class="btn btn-warning">
            @ButtonText
        </button>
        @Body
    </div>
    <div class="card-footer text-body-secondary">
        @Footer
    </div>
</div>

@code {


    protected override void OnInitialized()
    {
        
    }

    protected override bool ShouldRender()
    {
        return Customer != null;
    }

    
    public Customers Customer { get; set; } = new Customers();

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string? Description { get; set; }

    [Parameter]
    public string? ButtonText { get; set; }

    [Parameter]
    public EventCallback ClickBtn { get; set; }

    [Parameter]
    public EventCallback<string> ClickBtnChangeDescription { get; set; }

    [Parameter]
    public EventCallback<Customers> ClickBtnChangeCustomer { get; set; }

    [Parameter]
    public Func<string, Task<string>>? ClickBtnChangeDescriptionReturn { get; set; }

    [Parameter]
    public Func<Customers, Task<Customers>>? ClickBtnChangeCustomerReturn { get; set; }

    [Parameter]
    public RenderFragment? Header { get; set; }

    [Parameter]
    public RenderFragment? Body { get; set; }

    [Parameter]
    public RenderFragment? Footer { get; set; }

}
