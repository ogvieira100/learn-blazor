
@rendermode InteractiveAuto


<div class="card text-center">
    <div class="card-header">
        @Task?.Name    
    </div>
    <div class="card-body">
        <h5 class="card-title">
            @GetStatus()    
        </h5>
        @if (Task?.TaskStatus == Models.TaskStatus.NotStarted 
        )
        {
            <button @onclick=InitTaskAsync class="btn btn-primary">
                Iniciar
            </button>
        }else if (Task?.TaskStatus == Models.TaskStatus.InProgress)
        {
            <button @onclick=EndTaskAsync class="btn btn-success">
                Finalizar
            </button>
            <button @onclick=SendInitialAsync class="btn btn-warning">
                Voltar para o início
            </button>
        }
        else if (Task?.TaskStatus == Models.TaskStatus.Completed)
        {
            <button @onclick=SendInProgressAsync class="btn btn-warning">
                Voltar para em andamento
            </button>
            <button @onclick=SendInitialAsync class="btn btn-primary">
                Voltar para o inicio
            </button>
        }   
    </div>
    <div class="card-footer text-body-secondary">
        @GetStatusCard()
    </div>
</div>

@code {


    protected override void OnParametersSet()
    {
        if (Task != null)
        {
            Task.UpdateTast += (taskStatus) =>
            {
                return UpdateTask(taskStatus);
            };
        }
    }

    protected override void OnInitialized()
    {
       
    }

    string GetStatusCard()
    => $" Nome Tarefa: {Task?.Name ?? ""} Data inclusão: {Task?.DateCreated} Data da atualização: {Task?.DateUpdated} ";
    
    
    public async Task UpdateTask(Models.TaskStatus taskStatus)
    {
        this.Task!.TaskStatus = taskStatus;
        this.Task!.DateUpdated = DateTime.Now;
       
            await TaskUpdated.InvokeAsync();
    }   

    async Task SendInProgressAsync()
    {
        this.Task!.DateUpdated = DateTime.Now;
        this.Task!.TaskStatus = Models.TaskStatus.InProgress;
        
            await TaskUpdated.InvokeAsync();

    }

    async Task SendInitialAsync()
    {
        this.Task!.DateUpdated = DateTime.Now;
        this.Task!.TaskStatus = Models.TaskStatus.NotStarted;
       
            await TaskUpdated.InvokeAsync();

    }

    async Task EndTaskAsync() { 
        this.Task!.DateUpdated = DateTime.Now;
        this.Task!.TaskStatus = Models.TaskStatus.Completed;
      
            await TaskUpdated.InvokeAsync();
    
    }

    async Task InitTaskAsync()
    {
        this.Task!.DateUpdated = DateTime.Now;
        this.Task!.TaskStatus = Models.TaskStatus.InProgress;
       
        await  TaskUpdated.InvokeAsync();
    }   

    string GetStatus()
    {
        return Task?.TaskStatus switch
        {
            BlazorApp.Client.Models.TaskStatus.NotStarted => "Não iniciada",
            BlazorApp.Client.Models.TaskStatus.InProgress => "Em progresso",
            BlazorApp.Client.Models.TaskStatus.Completed => "Finalizada",
            _ => ""
        };
    }   

    [Parameter]
    public Tasks? Task { get; set; }

    [Parameter]
    public EventCallback TaskUpdated { get; set; }

}
