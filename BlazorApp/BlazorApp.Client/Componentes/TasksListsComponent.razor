@page "/taskslists"
@rendermode InteractiveAuto 

<div class="container mt-4">
    <!-- Linha do topo -->
    <div class="row">
        <div class="col-12" >
            <TaskAddComponent Tasks=Tasks
                              TaskAdded=TaskUpdatedAsync />

        </div>
    </div>

    <!-- Linha inferior com três colunas -->
    <div class="row mt-2">
        <div class="col-md-4" >
            <TasksListNotStartedComponent TasksUpdated=TaskUpdatedUpdateAllAsync
                                          @ref="tasksListNotStartedComponent"
                                          Tasks=Tasks />

        </div>
        <div class="col-md-4" >
            <TasksListsInProgressComponent @ref="tasksListsInProgressComponent"
                                           TasksUpdated=TaskUpdatedUpdateAllAsync
                                           Tasks=Tasks />

        </div>
        <div class="col-md-4" >
            <TasksListsCompletedComponent @ref="tasksListsCompletedComponent"
                                          TasksUpdated=TaskUpdatedUpdateAllAsync
                                          Tasks=Tasks />
        </div>
    </div>
</div>
    






@code {
    List<Tasks> Tasks { get; set; } 

    TasksListNotStartedComponent? tasksListNotStartedComponent { get; set; }

    TasksListsCompletedComponent? tasksListsCompletedComponent { get; set; }

    TasksListsInProgressComponent? tasksListsInProgressComponent { get; set; }

    async Task TaskUpdatedAsync(Models.TaskStatus taskStatus)
    {
        await Task.Run(() =>
        {

            switch (taskStatus)
            {
                case Models.TaskStatus.NotStarted:
                    tasksListNotStartedComponent?.UpdateComponent();
                    break;
                case Models.TaskStatus.InProgress:
                    tasksListsInProgressComponent?.UpdateComponent();
                    break;
                case Models.TaskStatus.Completed:
                    tasksListsCompletedComponent?.UpdateComponent();
                    break;
            }
           
        });

    }   

    async Task TaskUpdatedUpdateAllAsync(Models.TaskStatus taskStatus)
    {
           await tasksListNotStartedComponent?.UpdateComponent();
           await tasksListsInProgressComponent?.UpdateComponent();
           await tasksListsCompletedComponent?.UpdateComponent();
            StateHasChanged();
    } 



    protected override void OnInitialized()
    {
        Tasks = new List<Tasks>();
       
    }

}
